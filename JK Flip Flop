#jk flip flop
module jk_flipflop (
    input wire clk,
    input wire reset,
    input wire j,
    input wire k,
    output reg q,
    output reg q_bar
);
    always @(posedge clk or posedge reset)
    begin
        if (reset)
        begin
            q <= 1'b0;
            q_bar <= 1'b1;
        end
        else
        begin
            case ({j, k})
                2'b00: {q, q_bar} <= {q, q_bar};
                2'b01: {q, q_bar} <= {1'b0, 1'b1};
                2'b10: {q, q_bar} <= {1'b1, 1'b0};
                2'b11: {q, q_bar} <= {~q, ~q_bar};
            endcase
        end
    end
endmodule
#jk flip flop tb
`timescale 1ns/1ns

module tb_jk_flipflop;
    reg clk;
    reg reset;
    reg j;
    reg k;
    wire q;
    wire q_bar;

    jk_flipflop my_jk_flipflop (
        .clk(clk),
        .reset(reset),
        .j(j),
        .k(k),
        .q(q),
        .q_bar(q_bar)
    );

    always #5 clk = ~clk;

    initial begin
        $dumpfile("dump_jk.vcd");
        $dumpvars;
        clk = 0;
        reset = 1;
        j = 0;
        k = 0;
        #10 reset = 0;
        #10 j = 1;
        #10 k = 1;
        #100;
        if (q === 0 && q_bar === 1) begin
            $display("Test passed! q is %0b and q_bar is %0b", q, q_bar);
        end else begin
            $display("Test failed! Expected q=0, q_bar=1, but got q=%0b, q_bar=%0b", q, q_bar);
        end
        $finish;
    end
endmodule
